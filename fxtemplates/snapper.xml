<beast version="2.0"
       namespace="beastfx.app.beauti:beastfx.app.inputeditor:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.pkgmgmt:beast.base.core:beast.base.inference.util:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.inference.distribution"
	templateinfo="template for standard phylogenetic analysis,&lt;br> supporting tip-date analysis and calibrations">

<map name="connect" reserved="true">beastfx.app.inputeditor.BeautiConnector</map>
<map name="subtemplate" reserved="true">beastfx.app.inputeditor.BeautiSubTemplate</map>
<map name="Uniform">beast.base.inference.distribution.Uniform</map>
<map name="Normal">beast.base.inference.distribution.Normal</map>
<map name="OneOnX">beast.base.inference.distribution.OneOnX</map>
<map name="LogNormal">beast.base.inference.distribution.LogNormalDistributionModel</map>
<map name="Exponential">beast.base.inference.distribution.Exponential</map>
<map name="Gamma">beast.base.inference.distribution.Gamma</map>
<map name="Beta">beast.base.inference.distribution.Beta</map>
<map name="LaplaceDistribution">beast.base.inference.distribution.LaplaceDistribution</map>
<map name="InverseGamma">beast.base.inference.distribution.InverseGamma</map>
<map name="prior">beast.base.inference.distribution.Prior</map>

    <beauticonfig spec="beastfx.app.inputeditor.BeautiConfig"
        inputLabelMap="beast.base.inference.MCMC.operator=Operators,
	        beast.base.inference.MCMC.logger=Loggers,
			beast.base.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate,
			beast.base.evolution.speciation.YuleModel.birthDiffRate=Birth Rate"
        inlinePlugins ="beast.base.inference.MCMC.distribution,
            beast.base.evolution.sitemodel.SiteModel.substModel,
            beast.base.evolution.tree.coalescent.ExponentialGrowth,
            beast.base.evolution.tree.coalescent.ConstantPopulation,
            beast.base.evolution.tree.coalescent.Coalescent,
            beast.base.inference.State.stateNode"
        collapsedPlugins ="beast.base.inference.MCMC.logger"
        suppressPlugins = "beast.base.inference.MCMC.operator,
    		beast.base.inference.MCMC.operatorschedule,
	        beast.base.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.base.evolution.tree.coalescent.Coalescent.tree,
	        beast.base.inference.MCMC.state,
	        beast.base.inference.MCMC.distribution,
	        beast.base.inference.MCMC.init,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.base.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
			beast.base.evolution.speciation.YuleModel.treeIntervals,
			beast.base.evolution.speciation.YuleModel.useTipDates,
			beast.base.evolution.speciation.YuleModel.tree,
	        beast.base.evolution.tree.Tree,
	        beast.base.evolution.tree.Tree.trait,
	        beast.base.evolution.tree.Tree.taxa,
	        beast.base.evolution.tree.Tree.taxonset,
	        beast.base.evolution.tree.Tree.nodetype,
	        beast.base.evolution.tree.coalescent.RandomTree.trait,
	        beast.base.evolution.tree.coalescent.RandomTree.initial,
	        beast.base.evolution.tree.coalescent.RandomTree.taxa,
	        beast.base.evolution.tree.coalescent.RandomTree.taxonset,
	        beast.base.evolution.tree.coalescent.RandomTree.estimate,
	        beast.base.evolution.tree.coalescent.RandomTree.nodetype,
	        beast.base.evolution.tree.TreeParser.initial,
	        beast.base.evolution.tree.TreeParser.taxa,
	        beast.base.evolution.tree.TreeParser.taxonset,
	        beast.base.evolution.tree.TreeParser.trait,
	        beast.base.evolution.tree.TreeParser.estimate,
	        beast.base.evolution.tree.TreeParser.nodetype,
	        beast.base.evolution.tree.ClusterTree.initial,
	        beast.base.evolution.tree.ClusterTree.taxa,
	        beast.base.evolution.tree.ClusterTree.taxonset,
	        beast.base.evolution.tree.ClusterTree.trait,
	        beast.base.evolution.tree.ClusterTree.estimate,
	        beast.base.evolution.tree.ClusterTree.nodetype,
	        beast.base.evolution.tree.ClusterTree.distance,
	        beast.base.evolution.substitutionmodel.WAG.rates,
	        beast.base.evolution.substitutionmodel.WAG.frequencies,
	        beast.base.evolution.substitutionmodel.JTT.rates,
	        beast.base.evolution.substitutionmodel.JTT.frequencies,
	        beast.base.evolution.substitutionmodel.Blosum62.rates,
	        beast.base.evolution.substitutionmodel.Blosum62.frequencies,
	        beast.base.evolution.substitutionmodel.Dayhoff.rates,
	        beast.base.evolution.substitutionmodel.Dayhoff.frequencies,
	        beast.base.evolution.substitutionmodel.CPREV.rates,
	        beast.base.evolution.substitutionmodel.CPREV.frequencies,
	        beast.base.evolution.substitutionmodel.MTREV.rates,
	        beast.base.evolution.substitutionmodel.MTREV.frequencies,
	        beast.base.evolution.substitutionmodel.GTR.rates,
	        beast.base.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.base.inference.distribution.Prior.x,
            beast.base.evolution.tree.MRCAPrior.tree,
            beast.base.evolution.tree.MRCAPrior.monophyletic,
            beast.base.evolution.tree.MRCAPrior.taxonset,
            beast.base.evolution.branchratemodel.UCRelaxedClockModel.tree,
            beast.base.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
			beast.base.evolution.branchratemodel.UCRelaxedClockModel.distr,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.tree,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.meanRate,
            beast.base.evolution.branchratemodel.RandomLocalClockModel.indicators,
            beast.base.evolution.operator.ScaleOperator.indicator,
	        beast.base.inference.Operator.weight,
            beast.base.inference.Logger.model,
            beast.base.inference.Logger.mode,
            beast.base.inference.Logger.sort,            
            beast.base.inference.Logger.sanitiseHeaders,
            beast.base.evolution.tree.coalescent.BayesianSkyline.treeIntervals,
            beast.base.evolution.tree.coalescent.BayesianSkyline.groupSizes,
            beast.base.evolution.tree.coalescent.BayesianSkyline.popSizes,
            beast.base.evolution.speciation.YuleModel.originHeight,
            snapper.SnapSubstitutionModel.frequencies,
            snapper.SnapperTreeLikelihood.data,
            snapper.SnapperTreeLikelihood.scaling,
            snapper.SnapperTreeLikelihood.siteModel,
            snapper.SnapperTreeLikelihood.branchRateModel,
            snapper.SnapperTreeLikelihood.initFromTree,
            snapper.SnapperTreeLikelihood.pattern,
            snapper.SnapperTreeLikelihood.useTipDates,
            snapper.SnapperTreeLikelihood.useAmbiguities,
            snapper.SnapperTreeLikelihood.tree,
            snapper.SnapperTreeLikelihood.dominant,
            snapper.SnapperTreeLikelihood.ascSiteCount,
            snapper.SnapperTreeLikelihood.totalSiteCount,
            snapper.SnapperTreeLikelihood.useTipLikelihoods,
            snapper.SnapperTreeLikelihood.implementation,
            snapper.SnapperTreeLikelihood.proportions,
            snapper.SnapperTreeLikelihood.threads,
            snapper.SnapperTreeLikelihood.rootFrequencies,
            snapper.SnapSubstitutionModel.mutationRateU,
            snapper.SnapSubstitutionModel.mutationRateV,
            snapper.SnapSubstitutionModel.theta,
            snapper.SnapperTreeLikelihood.showPatternLikelihoodsAndQuit
            "
        buttonLabelMap="beastfx.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters"
    >
        <!--disableMenus="Mode"-->

        <panel spec="BeautiPanelConfig" panelname="Taxon Sets" tiptext="Taxon Sets"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon="2220.png.x" forceExpansion="FALSE"
            type="snapper.Data"
        />
		<mergepoint id="aux-partitions-panels"/>

        <panel spec='beastfx.app.inputeditor.BeautiPanelConfig' panelname="Model Parameters" tiptext="Specification of model parameters"
            path='distribution/distribution[id="likelihood"]/distribution'
            hasPartitions="none" icon='4.png' forceExpansion='TRUE'
            buttonStatus='NONE' type='snapper.SnapperTreeLikelihood'
        />

		<mergepoint id="aux-sitemodel-panels"/>

<!--
		<panel spec="BeautiPanelConfig" panelname="Clock Model" tiptext="Clock model"
            path="branchRateModel"
            hasPartitions="ClockModel" icon="4.png.x" forceExpansion="TRUE"
        />
		<mergepoint id="aux-clockmodel-panels"/>
-->		
		<panel spec="BeautiPanelConfig" panelname="Initialization" tiptext="Initial state"
            path="state/stateNode"
            hasPartitions="none" icon="6.png.x" forceExpansion="TRUE_START_COLLAPSED"
            isVisible="false"
        />
		<mergepoint id="aux-initilisation-panels"/>
		<panel spec="BeautiPanelConfig" panelname="Starting tree" tiptext="Starting tree"
            path="init"
            hasPartitions="none" icon="6.png.x" forceExpansion="TRUE"
            isVisible="false"
        />

		<panel spec="BeautiPanelConfig" panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon="7.png.x" forceExpansion="TRUE_START_COLLAPSED"
            type="beast.base.inference.Distribution"
        />
		<mergepoint id="aux-priors-panels"/>

		<panel spec="BeautiPanelConfig" panelname="Operators" tiptext="MCMC Operator details"
            path="operator"
            hasPartitions="none" icon="8.png.x" forceExpansion="TRUE_START_COLLAPSED"
            isVisible="false" buttonStatus="ADD_ONLY"
        />
		<mergepoint id="aux-operators-panels"/>

		<panel spec="BeautiPanelConfig" panelname="MCMC" tiptext="MCMC parameters"
            path=""
            hasPartitions="none" icon="9.png.x" forceExpansion="TRUE"
        />
		<mergepoint id="aux-panels"/>

        <alignmentProvider id="Add Alignment" spec="BeautiAlignmentProvider" template="@SnapperPartitionTemplate"/>



        <partitiontemplate id="SnapperPartitionTemplate" spec="BeautiSubTemplate" class="snapper.SnapperTreeLikelihood" mainid="mcmc">
<![CDATA[

        <data spec='snapper.Data' id='snapper.$(n)' dataType='integerdata'>
            <rawdata idref='$(n)'/>
        </data>

			<parameter name="stateNode" id="snapperCoalescentRate.t:$(n)" lower="1e-10" upper="10" spec="parameter.RealParameter">1.0</parameter>
          	<parameter name="stateNode" id="snapperU.s:$(n)" value="1.0" lower="0.0" spec="parameter.RealParameter" estimate="false"/>
          	<parameter name="stateNode" id="snapperV.s:$(n)" value="1.0" lower="0.0" spec="parameter.RealParameter" estimate="false"/>

            <distribution spec="snapper.SnapperTreeLikelihood" id="snapperTreeLikelihood.$(n)" initFromTree="false" pattern="coalescentRate" useLogLikelihoodCorrection="true" >
                <data idref="snapper.$(n)"/>
                <tree idref="Tree.t:$(n)"/>
                <siteModel spec="beast.base.evolution.sitemodel.SiteModel" id="SnapperSiteModel.s:$(n)">
                    <substModel spec="snapper.SnapSubstitutionModel" id="SnapperSubstModel.s:$(n)">
                        <mutationRateU idref="snapperU.s:$(n)"/>
                        <mutationRateV idref="snapperV.s:$(n)"/>
            	        <coalescentRate idref="snapperCoalescentRate.t:$(n)"/>
                    </substModel>
                </siteModel>
                <branchRateModel spec="StrictClockModel" id="StrictClock.c:$(n)">
                    <clock.rate id="clockRate.c:$(n)" spec="parameter.RealParameter" value="1.0" estimate="false"/>
                </branchRateModel>
            </distribution>

	        <prior id="ClockPrior.c:$(n)" x="@clockRate.c:$(n)"><distr spec="beast.base.inference.distribution.Uniform" upper="Infinity"/></prior>
	        <prior id="SnapperMutationRateUPrior.s:$(n)" x="@snapperU.s:$(n)"><distr spec="Gamma" beta="100" alpha="0.01"/></prior>
	        <prior id="SnapperMutationRateVPrior.s:$(n)" x="@snapperV.s:$(n)"><distr spec="Gamma" beta="100" alpha="0.01"/></prior>
	        <prior id="SnapperCoalescentRatePrior.t:$(n)" x="@snapperCoalescentRate.t:$(n)">
                <distr spec="Gamma"> 
                    <alpha value="0.01" estimate="false" spec="parameter.RealParameter"/>
                    <beta value="100.1" estimate="false" spec="parameter.RealParameter"/>
                </distr>
            </prior>

            <!-- tree and its properties -->
            <taxonset id="TaxonSet.$(n)" spec="beast.base.evolution.alignment.TaxonSet" alignment="@snapper.$(n)" />
            <plugin spec="beast.base.evolution.tree.Tree" id="Tree.t:$(n)" taxonset="@TaxonSet.$(n)" nodetype="snap.NodeData"/>

            <!--plugin spec="beast.base.evolution.tree.coalescent.RandomTree" id="RandomTree.t:$(n)" estimate="false" trait="@datetrait.$(n)" initial="@Tree.t:$(n)"-->
            <plugin spec="beast.base.evolution.tree.coalescent.RandomTree" id="RandomTree.t:$(n)" estimate="false" initial="@Tree.t:$(n)">
                <taxa idref="snapper.$(n)"/>
                <populationModel id="ConstantPopulation0.t:$(n)" spec="ConstantPopulation">
            		<popSize id="randomPopSize.t:$(n)" spec="parameter.RealParameter" value="1"/>
	            </populationModel>
            </plugin>

            <!-- default tree prior -->
            <plugin spec="YuleModel" id="YuleModel.t:$(n)" tree="@Tree.t:$(n)">
                <parameter name="birthDiffRate" id="birthRate.t:$(n)" value="1.0" estimate="true"/>
            </plugin>

            <plugin id="TreeHeight.t:$(n)" spec="beast.base.evolution.tree.TreeStatLogger" tree="@Tree.t:$(n)"/>

	        <log id='ThetaLogger' spec='snap.ThetaLogger' coalescenceRate='@snapperCoalescentRate.t:$(n)'/>

            <logger id="treelog.t:$(n)" spec="beast.base.inference.Logger" logEvery="1000" fileName="$(filebase).trees" mode="tree">
	            <log id="TreeWithMetaDataLogger.t:$(n)" spec="beast.base.evolution.TreeWithMetaDataLogger" tree="@Tree.t:$(n)">
	            </log>
            </logger>


            <operator id="YuleModelTreeScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3" tree="@Tree.t:$(n)"/>
            <operator id="YuleModelTreeRootScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3" tree="@Tree.t:$(n)" rootOnly="true"/>
            <operator id="YuleModelUniformOperator.t:$(n)" spec="Uniform" weight="30" tree="@Tree.t:$(n)"/>
            <operator id="YuleModelSubtreeSlide.t:$(n)" spec="SubtreeSlide" weight="15" gaussian="true" size="1.0" tree="@Tree.t:$(n)"/>
            <operator id="YuleModelNarrow.t:$(n)" spec="Exchange" isNarrow="true" weight="15" tree="@Tree.t:$(n)"/>
            <operator id="YuleModelWide.t:$(n)" spec="Exchange" isNarrow="false" weight="3" tree="@Tree.t:$(n)"/>
            <operator id="YuleModelWilsonBalding.t:$(n)" spec="WilsonBalding" weight="3" tree="@Tree.t:$(n)"/>


	        <operator id="SnapperNodeSwapper.t:$(n)" spec="snap.operators.NodeSwapper" weight="0.5" tree="@Tree.t:$(n)"/>
    	    <operator id="SnapperNodeBudger.t:$(n)" spec="snap.operators.NodeBudger" weight="5" size="0.5" tree="@Tree.t:$(n)"/>
        	<operator id="SnapperGammaMover.t:$(n)" spec="snap.operators.GammaMover" scale="0.75" weight="1" coalescenceRate="@snapperCoalescentRate.t:$(n)"/>
	        <operator id="SnapperRateMixer.t:$(n)" spec="snap.operators.RateMixer" scaleFactors="0.25" weight="1" tree="@Tree.t:$(n)" coalescenceRate="@snapperCoalescentRate.t:$(n)"/>
        	<operator id='SnapperMutationMover.s:$(n)' spec='snap.operators.MutationMover' window="0.1" weight="1" u='@snapperU.s:$(n)' v='@snapperV.s:$(n)'/>



            <prior id="YuleBirthRatePrior.t:$(n)" x="@birthRate.t:$(n)"><distr spec="beast.base.inference.distribution.Uniform" lower="0" upper="Infinity"/></prior>
  		    <operator id="YuleBirthRateScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.75" weight="3" parameter="@birthRate.t:$(n)"/>
			<operator id="StrictClockRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.75" weight="3" parameter="@clockRate.c:$(n)"/>
			<!-- need updown operator for clockRate?!? Also in SubstModel.xml -->
			<upDownOperator id="strictClockUpDownOperator.c:$(n)" spec="UpDownOperator" scaleFactor="0.75" weight="3">
				<up idref="clockRate.c:$(n)"/>
				<down idref="Tree.t:$(n)"/>
			</upDownOperator>

]]>
            <connect srcID="snapperTreeLikelihood.$(n)"            targetID="likelihood" inputName="distribution" if="isInitializing"/>
            <connect srcID="YuleModel.t:$(n)"               targetID="prior" inputName="distribution" if="isInitializing"/>
			<connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <connect srcID="treelog.t:$(n)"                 targetID="mcmc" inputName="logger" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="RandomTree.t:$(n)"                targetID="mcmc" inputName="init"   if="isInitializing"/>
			<connect method="beastfx.app.beauti.StateNodeInitialiserListInputEditor.customConnector"/>

            <connect srcID="ClockPrior.c:$(n)"                targetID="prior" inputName="distribution" if="inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true"/>
<!-- when FixMeanMutationRatesOperator, the prior is uniform due to the operator -->
            <connect srcID="MutationRatePrior.s:$(n)"         targetID="prior" inputName="distribution" if="nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true"/>

            <connect srcID="SnapperMutationRateUPrior.s:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(snapperU.s:$(n)) and snapperU.s:$(n)/estimate=true"/>
            <connect srcID="SnapperMutationRateVPrior.s:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(snapperV.s:$(n)) and snapperV.s:$(n)/estimate=true"/>
            <connect srcID="SnapperCoalescentRatePrior.t:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true"/>

            <connect srcID="Tree.t:$(n)"                      targetID="state" inputName="stateNode" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="snapperU.s:$(n)"       			  targetID="state" inputName="stateNode" if="inlikelihood(snapperU.s:$(n)) and snapperU.s:$(n)/estimate=true"/>
            <connect srcID="snapperV.s:$(n)"                  targetID="state" inputName="stateNode" if="inlikelihood(snapperV.s:$(n)) and snapperV.s:$(n)/estimate=true"/>
            <connect srcID="snapperCoalescentRate.t:$(n)"     targetID="state" inputName="stateNode" if="inposterior(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true"/>
            <connect srcID="clockRate.c:$(n)"                 targetID="state" inputName="stateNode" if="inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true"/>
            <connect srcID="birthRate.t:$(n)"                 targetID="state" inputName="stateNode" if="inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true"/>

<!--
            <connect srcID="SnapperNodeSwapper.t:$(n)"        targetID="mcmc" inputName="operator" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true">Swap nodes of tree of partition t:$(n)</connect>
            <connect srcID="SnapperNodeBudger.t:$(n)"         targetID="mcmc" inputName="operator" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true">Budge nodes of tree of partition t:$(n)</connect>
-->
            <connect srcID="SnapperGammaMover.t:$(n)"         targetID="mcmc" inputName="operator" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and inposterior(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true">Move gammas of partition t:$(n)</connect>
            <connect srcID="SnapperRateMixer.t:$(n)"          targetID="mcmc" inputName="operator" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and inposterior(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true">Mix rates of partition t:$(n)</connect>
            <connect srcID="SnapperMutationMover.s:$(n)"      targetID="mcmc" inputName="operator" if="inlikelihood(snapperU.s:$(n)) and snapperU.s:$(n)/estimate=true">Move mutations of partition t:$(n)</connect>

            <connect srcID="StrictClockRateScaler.c:$(n)"     targetID="mcmc" inputName="operator" if="inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true">Scale clock rate of partition c:$(n)</connect>
            <connect srcID="YuleBirthRateScaler.t:$(n)"       targetID="mcmc" inputName="operator" if="inposterior(birthRate.t:$(n)) and birthRate.t:$(n)/estimate=true">Scales birth rate of Yule prior for partition t:$(n)</connect>
            <connect srcID="strictClockUpDownOperator.c:$(n)" targetID="mcmc" inputName="operator"
                     if="nooperator(FixMeanRatesOperator) and inlikelihood(clockRate.c:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and clockRate.c:$(n)/estimate=true">
                Scale up substitution rate c:$(n) and scale down tree t:($n)
            </connect>

            <connect srcID="allTipDatesRandomWalker.t:$(n)"   targetID="mcmc" inputName="operator" if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and allTipDatesRandomWalker.t:$(n)/weight!=0.0">Estimates tip dates for tree t:$(n)</connect>

            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelTreeScaler.t:$(n)" targetID="mcmc">Scales all internal nodes for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelTreeRootScaler.t:$(n)" targetID="mcmc">Scales root node for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelUniformOperator.t:$(n)" targetID="mcmc">Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelSubtreeSlide.t:$(n)" targetID="mcmc">Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelNarrow.t:$(n)" targetID="mcmc">Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelWide.t:$(n)" targetID="mcmc">Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelWilsonBalding.t:$(n)" targetID="mcmc">Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>

            <connect srcID="treeLikelihood.$(n)"              targetID="tracelog" inputName="log" if="inlikelihood(treeLikelihood.$(n))"/>
            <connect srcID="TreeHeight.t:$(n)"                targetID="tracelog" inputName="log" if="inposterior(Tree.t:$(n))  and Tree.t:$(n)/estimate=true"/>
            <connect srcID="snapperU.s:$(n)"                  targetID="tracelog" inputName="log" if="inposterior(snapperU.s:$(n)) and snapperU.s:$(n)/estimate=true"/>
            <connect srcID="snapperV.s:$(n)"                  targetID="tracelog" inputName="log" if="inlikelihood(snapperV.s:$(n)) and snapperV.s:$(n)/estimate=true"/>
            <connect srcID="snapperCoalescentRate.t:$(n)"     targetID="tracelog" inputName="log" if="inlikelihood(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true"/>
            <connect srcID="snapperCoalescentRate.t:$(n)"     targetID="TreeWithMetaDataLogger.t:$(n)" inputName="metadata" if="inlikelihood(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true"/>
            <connect srcID="clockRate.c:$(n)"                 targetID="tracelog" inputName="log" if="inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true"/>
            <connect srcID="YuleModel.t:$(n)"                 targetID="tracelog" inputName="log" if="inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="birthRate.t:$(n)"                 targetID="tracelog" inputName="log" if="inposterior(YuleModel.t:$(n)) and birthRate.t:$(n)/estimate=true"/>
            <connect srcID='ThetaLogger'                      targetID='tracelog' inputName='log' if="inlikelihood(snapperCoalescentRate.t:$(n)) and snapperCoalescentRate.t:$(n)/estimate=true"/>

            <connect srcID="YuleBirthRatePrior.t:$(n)"        targetID="prior" inputName="distribution" if="inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true">Prior on Yule birth rate for partition s:$(n)</connect>

			<mergepoint id="aux-partitiontemplate"/>
        </partitiontemplate>

		<mergepoint id="substModelTemplates"/>
		<mergepoint id="clockModelTemplates"/>
		<mergepoint id="treePriorTemplates"/>
        <mergepoint id="parametricDistributions"/>

<!-- Tree initialisation -->
<!-- Random tree -->

        <subtemplate id="RandomTree" class="beast.base.evolution.tree.coalescent.RandomTree" mainid="RandomTree.t:$(n)">
<![CDATA[
            <tree spec="beast.base.evolution.tree.coalescent.RandomTree" id="RandomTree.t:$(n)" estimate="false" initial="@Tree.t:$(n)">
                <taxa idref="snapper.$(n)"/>
                <populationModel id="ConstantPopulation0.t:$(n)" spec="ConstantPopulation">
            		<popSize id="randomPopSize.t:$(n)" spec="parameter.RealParameter" value="1"/>
	            </populationModel>
            </tree>
]]>
        </subtemplate>

<!-- Cluster tree (defaults to UPGMA) -->

        <subtemplate id="ClusterTree" class="beast.base.evolution.tree.ClusterTree" mainid="ClusterTree.t:$(n)">
<![CDATA[
        <tree spec="beast.base.evolution.tree.ClusterTree" id="ClusterTree.t:$(n)" initial="@Tree.t:$(n)" clusterType="upgma" estimate="false" taxa="@snapper.$(n)"/>
]]>
        </subtemplate>

<!-- Newick tree -->
        <subtemplate id="NewickTree" class="beast.base.evolution.tree.TreeParser" mainid="NewickTree.t:$(n)">
<![CDATA[
        <tree_ spec="beast.base.evolution.tree.TreeParser" id="NewickTree.t:$(n)" initial="@Tree.t:$(n)" estimate="false" taxa="@snapper.$(n)" newick=""/>
]]>
        </subtemplate>

    </beauticonfig>


	<mergepoint id="misc"/>

    
<!--
<operator spec="DeltaExchangeOperator" id="FixMeanRatesOperator" weight="2" delta="0.75"/>
-->

<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery="5000" id="state">
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
				<mergepoint id="aux-priors"/>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood" useThreads="true">
				<mergepoint id="aux-likelihoods"/>
            </distribution>
        </distribution>

        <logger id="tracelog" logEvery="1000" fileName="$(filebase).log" sort="smart" sanitiseHeaders="true">
	        <model idref="posterior"/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id="screenlog" logEvery="1000">
	        <!--model idref="posterior"/-->
            <log idref="posterior"/>
            <!--this ESS is computed solely based on the current BEAST run (not the chain)-->
      	    <!--<ESS spec="ESS" name="log" arg="@posterior"/>-->
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

