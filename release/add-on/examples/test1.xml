<!-- Simulation test 1: species = 4, lineages/species = 2, samples = 100

u=v=1.0 alpha=2, beta=0.2 lambda=10
<1.0>((A[theta=0.1]:0.01,B[theta=0.1]:0.01)[theta=0.1]:0.01,(C[theta=0.1]:0.01,D[theta=0.1]:0.01)[theta=0.1]:0.01)[theta=0.1]

--> 

<beast version='2.0' namespace='snap:beast.util:beast.core.util:beast.evolution'>

<map name='snapprior'>snap.likelihood.SnAPPrior</map>

	<!-- n = 100 -->
<!--	
	<data spec='snap.Data' id='alignment' dataType='integerdata' statecount='21'>
		<sequence taxon='A' totalcount='21'>
17,20,19,0,0,20,20,19,20,19,13,19,0,20,19,0,20,0,20,2,0,11,16,20,9,20,4,20,0,20,17,5,16,5,20,9,1,12,20,1,12,20,3,0,4,0,2,17,11,0,6,0,0,0,20,16,20,1,0,18,0,20,20,11,19,20,20,0,20,16,15,4,0,0,19,0,5,3,20,4,19,20,0,0,20,0,20,20,19,20,7,20,20,2,20,16,20,1,13,20,
		</sequence>
		<sequence taxon='B' totalcount='21'>
8,16,20,0,0,20,19,20,20,19,16,15,0,20,20,3,18,0,18,8,1,0,20,20,0,20,0,19,8,17,16,4,5,20,20,7,13,8,19,0,5,13,3,0,0,0,0,20,13,0,0,0,0,1,20,8,20,0,0,20,0,16,11,9,20,17,19,0,20,18,8,0,5,3,16,0,0,0,20,0,20,20,0,0,20,0,20,20,20,15,12,20,20,0,20,19,20,0,20,19,
		</sequence>
		<sequence taxon='C' totalcount='21'>
19,20,20,1,2,20,19,19,14,14,4,20,0,20,20,0,20,12,20,7,0,0,18,16,0,19,1,20,2,20,14,8,18,0,20,0,0,7,20,0,10,16,0,0,9,0,1,18,17,6,4,8,0,1,16,12,20,1,0,20,0,19,14,13,20,20,20,5,19,12,0,5,3,0,13,1,0,0,19,6,20,12,4,0,8,0,19,20,20,20,9,10,19,0,20,15,20,0,20,16,
		</sequence>
		<sequence taxon='D' totalcount='21'>
19,20,20,0,0,19,16,18,12,20,1,17,1,18,20,0,20,5,20,1,0,0,15,6,0,20,0,20,1,20,16,10,14,0,19,0,0,6,20,0,19,18,0,3,3,7,0,20,20,0,0,1,2,0,20,5,17,0,2,20,1,18,17,16,20,19,19,0,20,3,0,0,1,0,10,4,0,0,20,6,15,20,0,4,7,2,20,11,20,20,0,18,20,0,11,8,11,0,20,20,
		</sequence>
	</data>
-->
        <!-- n = 100 -->
        <data spec='snap.Data' id='alignment' dataType='integerdata'>

		<sequence taxon='A' totalcount='11'>

		</sequence>
		<sequence taxon='B' totalcount='11'>

		</sequence>
		<sequence taxon='C' totalcount='11'>
0000020021002222212001000002002020002222200200001010000021200200012022100100000001020021020100222021202010220002022200221200220122202220002102222020020221002022212212022002112111020002022012200222202200212220020201220000020102002002000222020200000202101012200000212020002202222202200222212211220220002222220022222120022220002200002212102202100022222200110000002200020202210210222000022000222201000002121210020122012101200210202010211221222221012110002122222220121202012002101000020202222202002222022200122020202200020021020012000022202200002201220002200002002002002020200000222001200022022001000020202020202210122200200202022022021202002200222020222001122002200220202001202202002200220102122202010000220220022222222002102202220202222001020020000020210220200000000020002022200222020022221222000010002222002220002220001022000020222000222200120012202202100000222222122220201100210221000121020200222212220021202222000000020000002200200002020202000200022212202020102210002220202200202002220020220022222000
		</sequence>
		<sequence taxon='D' totalcount='11'>

		</sequence>
        </data>

<run id="mcmc" spec='beast.core.MCMC' chainLength="1000">
        <state>
          <parameter name='stateNode' id='theta' lower="1e-10" upper="1">0.5 0.5 0.05 0.05 0.5 0.5 0.5</parameter>
        <!--
          <parameter name='stateNode' id='theta' lower="1e-10" upper="1">0.5 0.5 0.5 0.5 0.001 0.001 0.001</parameter>
          -->
          
          <parameter name='stateNode' id='v' value='1.0' lower='0.0'/>
          <parameter name='stateNode' id='u' value='1.0' lower='0.0'/>
          <parameter name='stateNode' id='alpha'  value='2' lower='0.0'/>
          <parameter name='stateNode' id='beta'   value='200' lower='0.0'/>
          <parameter name='stateNode' id='lambda' value='10' lower='0.0'/>
          <stateNode id="tree" spec="beast.util.ClusterTree" clusterType="upgma" nodetype="snap.NodeData">
    
               <input name='taxa' idref='alignment'/>
          </stateNode>
        </state>

        <distribution id="posterior" spec='CompoundDistribution'>

             <distribution spec="snapper.SnapperTreeLikelihood" id='treeLikelihood' initFromTree='false' pattern='theta' >
                <data idref='alignment'/>
                <tree idref='tree'/>
                <siteModel spec='sitemodel.SiteModel' id="siteModel">
                    <substModel spec='snapper.SnapSubstitutionModel'>
                        <mutationRateU idref='u'/>
                        <mutationRateV idref='v'/>
            	        <theta idref='theta'/>
                    </substModel>
                </siteModel>
            </distribution>
        </distribution>


        <operator spec='operators.NodeSwapper' weight='0.5'>
            <tree name='tree' idref='tree'/>
        </operator>

        <operator spec='operators.NodeBudger' weight='5' size="0.5" tree='@tree'/>
        <operator spec='operators.ScaleOperator' scaleFactor='0.25' weight='1' tree='@tree'/>

        <operator spec='operators.GammaMover' scale='0.75' weight='1' coalescenceRate="@theta"/>

        <operator spec='operators.RateMixer' scaleFactors='0.25' weight='1'>
            <tree name='tree' idref='tree'/>
            <parameter name='coalescenceRate' idref='theta'/>
        </operator>



        <logger id="screenlog" logEvery="25">
            <distribution name='log' idref="treeLikelihood"/>
            <distribution name='log' idref="posterior"/>
            <log idref="theta"/>
            <!--
            <distribution name='log' idref="prior"/>
    	    <log spec='snap.ThetaLogger'>
	        	<coalescenceRate idref='coalescenceRate'/>
    	    </log>
	        <log spec='beast.evolution.tree.TreeHeightLogger'>
	        	<tree idref='tree'/>
    	    </log>
    	    -->
        </logger>
        <logger logEvery="100" fileName="test.log">
	        <model idref='posterior'/>
            <parameter name='log' idref="u"/>
            <parameter name='log' idref="v"/>
            <distribution name='log' idref="treeLikelihood"/>
            <distribution name='log' idref="posterior"/>
            <log idref="theta"/>
            <!--
    	    <parameter name='log' idref='coalescenceRate'/>
    	    <log spec='snap.ThetaLogger'>
        		<coalescenceRate idref='coalescenceRate'/>
    	    </log>
    	    -->
    	    <log spec='beast.evolution.tree.TreeHeightLogger'>
        		<tree idref='tree'/>
    	    </log>
    	    <log spec='TreeLengthLogger'>
	        	<tree idref='tree'/>
    	    </log>
        </logger>
        <logger logEvery="1000" fileName="test.trees" mode='tree'>
            <log spec='beast.evolution.tree.TreeWithMetaDataLogger' tree="@tree" metadata='@theta'/>
        </logger>
        
</run>

</beast>

